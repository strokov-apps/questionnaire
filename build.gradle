buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE")
		classpath 'com.moowork.gradle:gradle-node-plugin:0.11'
		classpath 'com.moowork.gradle:gradle-grunt-plugin:0.11'
		classpath "com.github.robfletcher:compass-gradle-plugin:2.0.6"
	}
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "spring-boot"
apply plugin: "com.moowork.node"
apply plugin: 'com.moowork.grunt'
apply plugin: "com.github.robfletcher.compass"

node {
	version = '4.2.1'
	download = true
}

grunt_normal.dependsOn installGrunt
grunt_normal.dependsOn npmInstall
grunt_normal.dependsOn compassCompile
build.dependsOn grunt_normal

compass {
	sassDir = file("src/main/resources/static-src/scss")
	cssDir = file("src/main/resources/static-src/css")
}

sourceSets {
	main {
		resources {
			exclude 'static-src'
		}
	}
}

repositories { 
	mavenCentral() 
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    // main compilation
    compile "org.springframework.boot:spring-boot-starter-web:1.2.5.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-jersey:1.2.5.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-logging:1.2.5.RELEASE"

    compile 'org.hibernate:hibernate-core:4.3.6.Final'

    compile "io.undertow:undertow-core:${undertowVersion}"
    compile "io.undertow:undertow-servlet:${undertowVersion}"

    // test compilation
    testCompile "org.codehaus.groovy:groovy-all:2.4.3"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.spockframework:spock-spring:${spockVersion}"

    testCompile "org.springframework:spring-test:4.1.7.RELEASE"
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

processResources {
	//parse json config file from root of project into map
	def slu = new groovy.json.JsonSlurper().parseText(new File(projectDir, "config.json").text)

	//check out what evn is used
    def environment = project.hasProperty('env') ? env : 'local'
    project.ext.environment = environment

	//put all props from json config file
    def p = new Properties()
    p.putAll(slu.environments[environment])

    p.each { k, v -> project.ext.set(k, v) }

    println "Environment is set to '$environment'."

	// don't use cached result, reran task any time
    outputs.upToDateWhen { false }

	//replace placeholders like database={db.url}
    filter(ReplaceTokens, tokens: project.ext.properties, beginToken : '{', endToken : '}')
}

task start(dependsOn: [build]) << {
	//It’s the same as running ‘java -jar ProjectArchive.jar’.
	javaexec {
		jvmArgs "-Xdebug", "-agentlib:jdwp=transport=dt_socket,address=9898,server=y,suspend=n"
		main="-jar"
		args jar.archivePath		
	}
}